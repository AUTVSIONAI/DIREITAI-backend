const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Configura√ß√£o do Supabase com service_role key (mais permiss√µes)
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY; // Chave com mais permiss√µes

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY s√£o obrigat√≥rias');
  console.log('üìù Adicione no seu arquivo .env:');
  console.log('SUPABASE_URL=sua_url_do_supabase');
  console.log('SUPABASE_SERVICE_ROLE_KEY=sua_service_role_key');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

async function setupStoragePolicies() {
  try {
    console.log('üîß Configurando pol√≠ticas de storage para avatares...');
    
    // 1. Verificar se o bucket existe
    console.log('üìÅ Verificando bucket avatars...');
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
    
    if (bucketsError) {
      console.error('‚ùå Erro ao listar buckets:', bucketsError);
      return;
    }
    
    const avatarsBucket = buckets.find(bucket => bucket.id === 'avatars');
    
    if (!avatarsBucket) {
      console.log('üìÅ Criando bucket avatars...');
      const { data: newBucket, error: createError } = await supabase.storage.createBucket('avatars', {
        public: true,
        fileSizeLimit: 5242880, // 5MB
        allowedMimeTypes: ['image/jpeg', 'image/png', 'image/gif', 'image/webp']
      });
      
      if (createError) {
        console.error('‚ùå Erro ao criar bucket:', createError);
        return;
      }
      
      console.log('‚úÖ Bucket avatars criado com sucesso');
    } else {
      console.log('‚úÖ Bucket avatars j√° existe');
    }
    
    // 2. Tentar configurar pol√≠ticas via SQL com service_role
    console.log('üîê Configurando pol√≠ticas RLS...');
    
    const policies = [
      {
        name: 'Users can upload own avatars',
        sql: `
          CREATE POLICY "Users can upload own avatars" ON storage.objects
          FOR INSERT WITH CHECK (
            bucket_id = 'avatars' AND
            (auth.uid())::text = (string_to_array(name, '/'))[1]
          );
        `
      },
      {
        name: 'Public can view avatars',
        sql: `
          CREATE POLICY "Public can view avatars" ON storage.objects
          FOR SELECT USING (bucket_id = 'avatars');
        `
      },
      {
        name: 'Users can update own avatars',
        sql: `
          CREATE POLICY "Users can update own avatars" ON storage.objects
          FOR UPDATE USING (
            bucket_id = 'avatars' AND
            (auth.uid())::text = (string_to_array(name, '/'))[1]
          );
        `
      },
      {
        name: 'Users can delete own avatars',
        sql: `
          CREATE POLICY "Users can delete own avatars" ON storage.objects
          FOR DELETE USING (
            bucket_id = 'avatars' AND
            (auth.uid())::text = (string_to_array(name, '/'))[1]
          );
        `
      }
    ];
    
    // Primeiro, remover pol√≠ticas existentes
    console.log('üóëÔ∏è Removendo pol√≠ticas existentes...');
    const dropPolicies = [
      'DROP POLICY IF EXISTS "Users can upload own avatars" ON storage.objects;',
      'DROP POLICY IF EXISTS "Public can view avatars" ON storage.objects;',
      'DROP POLICY IF EXISTS "Users can update own avatars" ON storage.objects;',
      'DROP POLICY IF EXISTS "Users can delete own avatars" ON storage.objects;'
    ];
    
    for (const dropSql of dropPolicies) {
      const { error } = await supabase.rpc('exec_sql', { sql: dropSql });
      if (error && !error.message.includes('does not exist')) {
        console.log('‚ö†Ô∏è Aviso ao remover pol√≠tica:', error.message);
      }
    }
    
    // Criar novas pol√≠ticas
    for (const policy of policies) {
      console.log(`üìù Criando pol√≠tica: ${policy.name}`);
      const { error } = await supabase.rpc('exec_sql', { sql: policy.sql });
      
      if (error) {
        console.error(`‚ùå Erro ao criar pol√≠tica ${policy.name}:`, error.message);
        console.log('üí° Tente configurar manualmente no Dashboard do Supabase');
      } else {
        console.log(`‚úÖ Pol√≠tica ${policy.name} criada com sucesso`);
      }
    }
    
    // 3. Verificar pol√≠ticas criadas
    console.log('üîç Verificando pol√≠ticas criadas...');
    const { data: policiesCheck, error: policiesError } = await supabase.rpc('exec_sql', {
      sql: `
        SELECT policyname, cmd, qual 
        FROM pg_policies 
        WHERE schemaname = 'storage' 
          AND tablename = 'objects' 
          AND policyname LIKE '%avatars%'
        ORDER BY policyname;
      `
    });
    
    if (policiesError) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar pol√≠ticas automaticamente');
      console.log('üìã Verifique manualmente no Dashboard do Supabase');
    } else if (policiesCheck && policiesCheck.length > 0) {
      console.log('‚úÖ Pol√≠ticas encontradas:');
      policiesCheck.forEach(policy => {
        console.log(`  - ${policy.policyname} (${policy.cmd})`);
      });
    }
    
    console.log('\nüéâ Configura√ß√£o conclu√≠da!');
    console.log('üìã Se houver erros, configure manualmente no Dashboard:');
    console.log('1. Acesse https://supabase.com/dashboard');
    console.log('2. V√° para Storage > avatars > Policies');
    console.log('3. Configure as pol√≠ticas conforme o arquivo fix_avatars_bucket_rls_dashboard.sql');
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
    console.log('üí° Configure manualmente no Dashboard do Supabase');
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  setupStoragePolicies();
}

module.exports = { setupStoragePolicies };